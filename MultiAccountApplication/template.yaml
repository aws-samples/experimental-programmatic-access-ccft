AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Metadata:
  AWS::ServerlessRepo::Application:
    Name: experimental-programmatic-access-ccft
    Description: This application automates the monthly extraction of new AWS Customer Carbon Footprint Tool data within a multi account structure
    Author: experimental-programmatic-access-ccft-team
    LicenseUrl: ../LICENSE
    ReadmeUrl: ../README.md
    SemanticVersion: 1.1.6
    HomePageUrl: https://github.com/aws-samples/experimental-programmatic-access-ccft
    SourceCodeUrl: https://github.com/aws-samples/experimental-programmatic-access-ccft
Description: >
  ccft-sam-script

  SAM Template to automate the monthly extraction of new CCFT data within a multi account structure (uksb-880c16twdr).

# More info about Globals: 
Globals:
  Function:
    Timeout: 3
    MemorySize: 128

Parameters:
  CarbonEmissionsDataBucketName:
    Description: "Name suffix (w/o prefixes for acct ID, region) for carbon emissions data bucket (will be created by this stack)"
    Type: "String"
    Default: "ccft-data"
  CarbonEmissionsDataFileName:
    Description: "Name prefix for the .json file as output of the script"
    Type: "String"
    Default: "ccft-access.json"
  CCFTRoleName:
    Description: "Name of the IAM role that was deployed into all member accounts and gives read access to the AWS CCFT data"
    Type: "String"
    Default: "ccft-read-role"
  GlueDatabaseName:
    Description: "Name of the Glue database used for Athena (will be created by this stack)"
    Type: "String"
    Default: "carbon_emissions"

Resources:

  # -------------------------------------------------------------------------------------------------------------------
  # Create an S3 bucket to be used as data storage for AWS Customer Carbon Footprint Tool data.
  # -------------------------------------------------------------------------------------------------------------------

  CarbonEmissionsDataBucket:
    Type: AWS::S3::Bucket
    Metadata:
      guard:
        SuppressedRules:
        # We neither log nor version the bucket for the code sample to reduce storage.
        # Do versioning and lifecycling of deleted versions as needed.
        - S3_BUCKET_LOGGING_ENABLED
        - S3_BUCKET_VERSIONING_ENABLED
    Properties:
      BucketName: !Sub "${AWS::AccountId}-${AWS::Region}-${CarbonEmissionsDataBucketName}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  CarbonEmissionsDataBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CarbonEmissionsDataBucket
      PolicyDocument:
        Statement:
          - Effect: Deny
            Principal: "*"
            Action: "s3:*"
            Resource:
              - !Sub "arn:aws:s3:::${CarbonEmissionsDataBucket}"
              - !Sub "arn:aws:s3:::${CarbonEmissionsDataBucket}/*"
            Condition:
              Bool:
                aws:SecureTransport: false

  # -------------------------------------------------------------------------------------------------------------------
  # Create an S3 bucket to be used as Athena output location, with a retention time of files of 1 day.
  # -------------------------------------------------------------------------------------------------------------------

  AthenaResultBucket:
    Type: AWS::S3::Bucket
    Metadata:
      guard:
        SuppressedRules:
        # We neither log nor version the bucket for the code sample to reduce storage.
        # Do versioning and lifecycling of deleted versions as needed.
        - S3_BUCKET_LOGGING_ENABLED
        - S3_BUCKET_VERSIONING_ENABLED
    Properties:
      BucketName: !Sub "${AWS::AccountId}-${AWS::Region}-athenaresults"
      LifecycleConfiguration:
        Rules:
          - Id: DeleteAfterOneDay
            Status: Enabled
            ExpirationInDays: 1
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  AthenaResultBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AthenaResultBucket
      PolicyDocument:
        Statement:
          - Effect: Deny
            Principal: "*"
            Action: "s3:*"
            Resource:
              - !Sub "arn:aws:s3:::${AthenaResultBucket}"
              - !Sub "arn:aws:s3:::${AthenaResultBucket}/*"
            Condition:
              Bool:
                aws:SecureTransport: false


  # -------------------------------------------------------------------------------------------------------------------
  # Create an AWS Step Function State Machine and a EventBridge rule to trigger the Step Functions workflow.
  # -------------------------------------------------------------------------------------------------------------------

  ExtractCarbonEmissionsStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: statemachine/extract_carbon_emissions.asl.json
      DefinitionSubstitutions:
        ExtractCarbonEmissionsFunctionArn: !GetAtt ExtractCarbonEmissionsFunction.Arn
        GetAccountIDsFunctionArn: !GetAtt GetAccountIDsFunction.Arn
        CreateAlterAthenaViewFunctionArn: !GetAtt CreateAlterAthenaViewFunction.Arn
        CheckFirstInvocationFunctionArn: !GetAtt CheckFirstInvocationFunction.Arn
        CarbonEmissionsDataBucketArn: !GetAtt CarbonEmissionsDataBucket.Arn
        CarbonEmissionsDataBucketName: !Ref CarbonEmissionsDataBucket    
      Events:
        ComplexScheduleEvent:
          Type: ScheduleV2
          Properties:
            ScheduleExpression: "cron(0 0 15 * ? *)"
            FlexibleTimeWindow:
              Mode: FLEXIBLE
              MaximumWindowInMinutes: 60
      Policies: 
        - LambdaInvokePolicy:
            FunctionName: !Ref ExtractCarbonEmissionsFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref GetAccountIDsFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref CreateAlterAthenaViewFunction 
        - LambdaInvokePolicy:
            FunctionName: !Ref CheckFirstInvocationFunction
        - Statement:
          - Sid: AllowStartExecution
            Effect: Allow
            Action:
            - states:StartExecution
            Resource: '*'

  # -------------------------------------------------------------------------------------------------------------------
  # Create a Lambda function to get account IDs
  # -------------------------------------------------------------------------------------------------------------------

  GetAccountIDsFunction:
    Type: AWS::Serverless::Function 
    Properties:
      FunctionName: "get-account-ids"
      CodeUri: lambda_functions/get_account_ids/
      Handler: app.lambda_handler
      Policies:
        - Statement:
          - Sid: ListAccounts
            Effect: Allow
            Action:
            - organizations:ListAccounts
            Resource: "*"
          - Sid: DescribeOrganization
            Effect: Allow
            Action:
            - organizations:DescribeOrganization
            Resource: "*"
      Runtime: python3.11
      Architectures:
        - arm64
      Timeout: 20

  GetAccountIDsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Metadata:
      guard:
        SuppressedRules:
        # Log group data is always encrypted in CloudWatch Logs.
        # By default, CloudWatch Logs uses server-side encryption for the log data at rest.
        - CLOUDWATCH_LOG_GROUP_ENCRYPTED
    Properties:
      LogGroupName: !Sub "/aws/lambda/${GetAccountIDsFunction}"
      RetentionInDays: 1

  # -------------------------------------------------------------------------------------------------------------------
  # Create a Lambda function to check for data for first invocation
  # -------------------------------------------------------------------------------------------------------------------

  CheckFirstInvocationFunction:
    Type: AWS::Serverless::Function 
    Properties:
      FunctionName: "check-first-invocation"
      CodeUri: lambda_functions/check_first_invocation/
      Handler: app.lambda_handler
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref CarbonEmissionsDataBucket
        - Statement:
          - Sid: ListAccounts
            Effect: Allow
            Action:
            - organizations:ListAccounts
            Resource: "*"
          - Sid: DescribeOrganization
            Effect: Allow
            Action:
            - organizations:DescribeOrganization
            Resource: "*"
      Runtime: python3.11
      Architectures:
        - arm64
      Environment:
        Variables:
          bucketName: !Ref CarbonEmissionsDataBucket
      Timeout: 20

  CheckFirstInvocationFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Metadata:
      guard:
        SuppressedRules:
        # Log group data is always encrypted in CloudWatch Logs.
        # By default, CloudWatch Logs uses server-side encryption for the log data at rest.
        - CLOUDWATCH_LOG_GROUP_ENCRYPTED
    Properties:
      LogGroupName: !Sub "/aws/lambda/${CheckFirstInvocationFunction}"
      RetentionInDays: 1

  # -------------------------------------------------------------------------------------------------------------------
  # Create a Lambda function, role + log group to extract AWS Customer Carbon Footprint Tool data.
  # -------------------------------------------------------------------------------------------------------------------

  ExtractCarbonEmissionsLambdaRole:
    Type: AWS::IAM::Role
    Metadata:
      guard:
        SuppressedRules:
          - IAM_NO_INLINE_POLICY_CHECK
    Properties:
      RoleName: extract-emissions-lambda-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CarbonDataExtractionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: GetCarbonFootprintSummary
                Effect: Allow
                Action:
                  - sustainability:GetCarbonFootprintSummary
                Resource: '*'
              - Sid: S3WritePolicy
                Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !Sub "${CarbonEmissionsDataBucket.Arn}/*"
              - Sid: STSAssumeRole
                Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource: !Sub "arn:${AWS::Partition}:iam::*:role/${CCFTRoleName}"
  
  ExtractCarbonEmissionsFunction:
    Type: AWS::Serverless::Function 
    Properties:
      FunctionName: "extract-carbon-emissions-data"
      CodeUri: lambda_functions/extract_carbon_emissions/
      Handler: app.lambda_handler
      Role: !GetAtt ExtractCarbonEmissionsLambdaRole.Arn
      Runtime: python3.11
      Architectures:
        - arm64
      Environment:
        Variables:
          bucketName: !Ref CarbonEmissionsDataBucket
          ccftRole: !Ref CCFTRoleName
          fileName: !Ref CarbonEmissionsDataFileName
      Timeout: 20

  ExtractCarbonEmissionsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Metadata:
      guard:
        SuppressedRules:
        # Log group data is always encrypted in CloudWatch Logs.
        # By default, CloudWatch Logs uses server-side encryption for the log data at rest.
        - CLOUDWATCH_LOG_GROUP_ENCRYPTED
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ExtractCarbonEmissionsFunction}"
      RetentionInDays: 1

  AthenaWorkgroup:
    Type: AWS::Athena::WorkGroup
    Properties:
      Name: !Sub "${GlueDatabaseName}-workgroup"
      Description: !Sub "Workgroup for queries to the ${GlueDatabaseName} database by the experimental programmatic access"
      RecursiveDeleteOption: true
      State: "ENABLED"
      WorkGroupConfiguration:
        EnforceWorkGroupConfiguration: true
        ResultConfiguration:
          OutputLocation: !Sub "s3://${AthenaResultBucket}"

  # -------------------------------------------------------------------------------------------------------------------
  # Create a Lambda function to create Athena table and view.
  # -------------------------------------------------------------------------------------------------------------------

  CreateAlterAthenaViewFunction:
    Type: AWS::Serverless::Function 
    Properties:
      FunctionName: "create-alter-athena-view"
      CodeUri: lambda_functions/create_alter_athena_view/
      Handler: app.lambda_handler
      Policies:
        - Statement:
          - Sid: Athena
            Effect: Allow
            Action:
            - athena:StartQueryExecution
            - athena:GetQueryResults
            - athena:StopQueryExecution
            - athena:GetQueryExecution
            - glue:CreateDatabase
            - glue:GetDatabase
            - glue:CreateTable
            - glue:UpdateTable
            - glue:GetTable
            Resource:
            - !Sub "arn:${AWS::Partition}:athena:${AWS::Region}:${AWS::AccountId}:workgroup/${AthenaWorkgroup}"
            - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:catalog"
            - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:database/${GlueDatabaseName}"
            - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:table/${GlueDatabaseName}/*"
          - Sid: S3Allow
            Effect: Allow
            Action:
            - s3:*
            Resource: 
            - !Sub "${CarbonEmissionsDataBucket.Arn}/*"
            - !Sub "${AthenaResultBucket.Arn}/*"
            - !Sub "${AthenaResultBucket.Arn}"
      Runtime: python3.11
      Architectures:
        - arm64
      Environment:
        Variables:
          emissionsBucketName: !Ref CarbonEmissionsDataBucket
          workgroupName: !Ref AthenaWorkgroup
          glueDatabaseName: !Ref GlueDatabaseName
      Timeout: 20
